name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# אל תריץ כמה פייפליינים במקביל על אותו ענף
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ---------- שלב 1: בדיקות קוד (Lint + Tests) ----------
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies (app + dev)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest

      - name: Lint (flake8)
        run: flake8 . --max-line-length=120

      - name: Unit tests (pytest)
        run: pytest -q

      # בדיקת קומפילציה מהירה (אופציונלי)
      - name: Compile check
        run: python -m compileall app

  # ---------- שלב 2: Build+Scan+Push Docker Image ----------
  build-and-push:
    runs-on: ubuntu-latest
    needs: test   # אל תבנה אם הבדיקות נכשלו

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # בנה מטא-דאטה אוטומטית לתגיות (latest, SHA, וכו')
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/health-check-dashboard
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build + Push image (פוש רק ב-push ל-main; ב-PR בונה בלי פוש)
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # סריקת אבטחה עם Trivy על ה-image שנבנה
      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'   # לא להפיל את ה-build; שנה ל-1 כדי לאכוף חסימה

  # ---------- שלב 3 (רשות): דיפלוי ל-Kubernetes ----------
  # כדי לא להעמיס כרגע השארתי כהערה. כשתרצה – נוסיף.
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup kubectl
  #       uses: azure/setup-kubectl@v4
  #       with:
  #         version: 'v1.30.0'
  #     - name: Write kubeconfig
  #       run: |
  #         mkdir -p $HOME/.kube
  #         echo "${{ secrets.KUBECONFIG_CONTENT }}" > $HOME/.kube/config
  #     - name: Apply manifests
  #       run: |
  #         kubectl set image deploy/health-check app=${{ secrets.DOCKERHUB_USERNAME }}/health-check-dashboard:latest
  #         kubectl rollout status deploy/health-check
